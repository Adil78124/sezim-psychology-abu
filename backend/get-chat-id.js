const https = require('https');

// –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const BOT_TOKEN = '7982241397:AAGzinVEu6w_BgUrTOy2PPyEtyfssMVKJvU';

console.log('üîç –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Chat ID...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
function getUpdates() {
  const options = {
    hostname: 'api.telegram.org',
    path: `/bot${BOT_TOKEN}/getUpdates`,
    method: 'GET'
  };

  const req = https.request(options, (res) => {
    let data = '';
    
    res.on('data', (chunk) => {
      data += chunk;
    });
    
    res.on('end', () => {
      try {
        const response = JSON.parse(data);
        if (response.ok && response.result.length > 0) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è:');
          response.result.forEach((update, index) => {
            if (update.message) {
              const chat = update.message.chat;
              console.log(`üì± –°–æ–æ–±—â–µ–Ω–∏–µ ${index + 1}:`);
              console.log(`   üë§ –û—Ç: ${chat.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} ${chat.last_name || ''}`);
              console.log(`   üÜî Chat ID: ${chat.id}`);
              console.log(`   üìù –¢–µ–∫—Å—Ç: ${update.message.text || '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}`);
              console.log('');
            }
          });
          
          // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π Chat ID
          const lastMessage = response.result[response.result.length - 1];
          if (lastMessage.message) {
            const chatId = lastMessage.message.chat.id;
            console.log(`üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π Chat ID: ${chatId}`);
            console.log('');
            console.log('üìù –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ backend/.env:');
            console.log(`TELEGRAM_CHAT_ID=${chatId}`);
          }
        } else {
          console.log('‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
          console.log('üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞');
        }
      } catch (err) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', err.message);
      }
    });
  });

  req.on('error', (err) => {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', err.message);
  });

  req.end();
}

getUpdates();
