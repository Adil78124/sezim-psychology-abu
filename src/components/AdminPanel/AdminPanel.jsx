import React, { useEffect, useState } from "react";
import { supabase } from "../../supabaseClient";
import "./AdminPanel.css";

export default function AdminPanel() {
  const [user, setUser] = useState(null);
  const [isAdmin, setIsAdmin] = useState(false);
  const [loading, setLoading] = useState(true);

  const [news, setNews] = useState([]);
  const [title, setTitle] = useState("");
  const [content, setContent] = useState("");
  const [imageUrl, setImageUrl] = useState("");
  const [link, setLink] = useState("");
  const [addingNews, setAddingNews] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
  const [imageMode, setImageMode] = useState("url"); // "url" –∏–ª–∏ "upload"
  const [imageFile, setImageFile] = useState(null);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [uploadedImageUrl, setUploadedImageUrl] = useState("");

  useEffect(() => {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const getCurrentUser = async () => {
      const { data: { user }, error } = await supabase.auth.getUser();
      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        setUser(null);
        setIsAdmin(false);
        setLoading(false);
        return;
      }
      
      setUser(user);
      if (user) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        // –í Supabase —ç—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ RLS –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É email
        const adminEmails = ['kairatovadil7@gmail.com', 'haval.semey@mail.ru'];
        setIsAdmin(adminEmails.includes(user.email));
      } else {
        setIsAdmin(false);
      }
      setLoading(false);
    };

    getCurrentUser();

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
      if (event === 'SIGNED_IN' && session?.user) {
        setUser(session.user);
        const adminEmails = ['kairatovadil7@gmail.com', 'haval.semey@mail.ru'];
        setIsAdmin(adminEmails.includes(session.user.email));
      } else if (event === 'SIGNED_OUT') {
        setUser(null);
        setIsAdmin(false);
      }
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ Supabase
    const loadNews = async () => {
      const { data, error } = await supabase
        .from('news')
        .select('*')
        .order('created_at', { ascending: false });
      
      if (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
      } else {
        setNews(data || []);
      }
    };

    loadNews();

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ news
    const newsSubscription = supabase
      .channel('news_changes')
      .on('postgres_changes', 
        { event: '*', schema: 'public', table: 'news' },
        () => {
          loadNews(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        }
      )
      .subscribe();

    return () => {
      subscription?.unsubscribe();
      newsSubscription.unsubscribe();
    };
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Supabase Storage
  const uploadImage = async (file) => {
    if (!file) {
      throw new Error("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω");
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if (!file.type.startsWith('image/')) {
      throw new Error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
    }

    try {
      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
      const timestamp = Date.now();
      const fileName = `news/${timestamp}_${file.name}`;

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage
      const { data, error } = await supabase.storage
        .from('news-images')
        .upload(fileName, file);

      if (error) {
        throw error;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
      const { data: publicUrl } = supabase.storage
        .from('news-images')
        .getPublicUrl(fileName);

      setUploadProgress(0);
      return publicUrl.publicUrl;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", error);
      throw error;
    }
  };

  const addNews = async (e) => {
    e.preventDefault();
    if (!isAdmin) return alert("–ù–µ—Ç –ø—Ä–∞–≤");
    if (!title || !content) return alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");
    
    setAddingNews(true);
    try {
      let finalImageUrl = "";

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
      if (imageMode === "upload" && imageFile) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage
        finalImageUrl = await uploadImage(imageFile);
      } else if (imageMode === "url" && imageUrl.trim()) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π URL
        finalImageUrl = imageUrl.trim();
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤ Supabase
      const { error } = await supabase
        .from('news')
        .insert({
          title,
          content,
          image_url: finalImageUrl || null,
          link: link.trim() || null,
          created_at: new Date().toISOString()
        });

      if (error) {
        throw error;
      }
      
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      setTitle("");
      setContent("");
      setImageUrl("");
      setLink("");
      setImageFile(null);
      setUploadedImageUrl("");
      setUploadProgress(0);
      
      alert("‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
    } catch (error) {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: " + error.message);
      console.error(error);
    } finally {
      setAddingNews(false);
    }
  };

  const remove = async (id) => {
    if (!isAdmin) return alert("–ù–µ—Ç –ø—Ä–∞–≤");
    if (!window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å?")) return;
    
    try {
      const { error } = await supabase
        .from('news')
        .delete()
        .eq('id', id);

      if (error) {
        throw error;
      }
    } catch (error) {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: " + error.message);
    }
  };

  const logout = async () => {
    await supabase.auth.signOut();
    window.location.reload();
  };

  if (loading) {
    return (
      <div className="admin-loading">
        <div className="loading-spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="admin-error">
        <h3>‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h3>
        <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É</p>
      </div>
    );
  }

  if (!isAdmin) {
    return (
      <div className="admin-error">
        <h3>üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω</h3>
        <p>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</p>
        <button onClick={logout} className="btn btn-secondary">–í—ã–π—Ç–∏</button>
      </div>
    );
  }

  return (
    <div className="admin-panel">
      <div className="admin-header">
        <div className="container">
          <div className="admin-header-content">
            <div>
              <h1>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h1>
              <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.email}</p>
            </div>
            <button onClick={logout} className="btn btn-secondary">
              –í—ã–π—Ç–∏
            </button>
          </div>
        </div>
      </div>

      <div className="admin-content">
        <div className="container">
          {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ */}
          <section className="admin-section">
            <h2 className="section-title">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å</h2>
            <div className="add-news-card">
              <form onSubmit={addNews} className="news-form">
                <div className="form-group">
                  <label htmlFor="news-title">–ó–∞–≥–æ–ª–æ–≤–æ–∫</label>
                  <input
                    id="news-title"
                    type="text"
                    value={title}
                    onChange={e => setTitle(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏"
                    required
                  />
                </div>

                <div className="form-group">
                  <label htmlFor="news-content">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</label>
                  <textarea
                    id="news-content"
                    value={content}
                    onChange={e => setContent(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏"
                    rows="6"
                    required
                  />
                </div>

                <div className="form-group">
                  <label>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
                  
                  {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ */}
                  <div style={{ marginBottom: '15px', display: 'flex', gap: '10px' }}>
                    <button
                      type="button"
                      onClick={() => setImageMode("url")}
                      className={`mode-btn ${imageMode === "url" ? "active" : ""}`}
                      style={{
                        padding: '8px 16px',
                        border: imageMode === "url" ? '2px solid #667eea' : '2px solid #ddd',
                        borderRadius: '8px',
                        background: imageMode === "url" ? '#f0f2ff' : 'white',
                        color: imageMode === "url" ? '#667eea' : '#666',
                        cursor: 'pointer',
                        fontWeight: imageMode === "url" ? 'bold' : 'normal',
                        transition: 'all 0.3s'
                      }}
                    >
                      üîó –í—Å—Ç–∞–≤–∏—Ç—å URL
                    </button>
                    <button
                      type="button"
                      onClick={() => setImageMode("upload")}
                      className={`mode-btn ${imageMode === "upload" ? "active" : ""}`}
                      style={{
                        padding: '8px 16px',
                        border: imageMode === "upload" ? '2px solid #667eea' : '2px solid #ddd',
                        borderRadius: '8px',
                        background: imageMode === "upload" ? '#f0f2ff' : 'white',
                        color: imageMode === "upload" ? '#667eea' : '#666',
                        cursor: 'pointer',
                        fontWeight: imageMode === "upload" ? 'bold' : 'normal',
                        transition: 'all 0.3s'
                      }}
                    >
                      üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
                    </button>
                  </div>

                  {/* –ü–æ–ª–µ URL */}
                  {imageMode === "url" && (
                    <>
                      <input
                        id="news-image-url"
                        type="url"
                        value={imageUrl}
                        onChange={e => setImageUrl(e.target.value)}
                        placeholder="https://example.com/image.jpg"
                        style={{
                          width: '100%',
                          padding: '12px',
                          border: '1px solid #ddd',
                          borderRadius: '8px',
                          fontSize: '14px'
                        }}
                      />
                      <p className="field-hint" style={{ marginTop: '8px', fontSize: '13px', color: '#666' }}>
                        üí° –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ <a href="https://imgur.com/upload" target="_blank" rel="noopener noreferrer">Imgur</a> –∏–ª–∏ <a href="https://cloudinary.com" target="_blank" rel="noopener noreferrer">Cloudinary</a>
                      </p>
                    </>
                  )}

                  {/* –ü–æ–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ */}
                  {imageMode === "upload" && (
                    <>
                      <input
                        id="news-image-file"
                        type="file"
                        accept="image/*"
                        onChange={(e) => {
                          const file = e.target.files[0];
                          setImageFile(file);
                          if (file) {
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
                            const reader = new FileReader();
                            reader.onloadend = () => {
                              setUploadedImageUrl(reader.result);
                            };
                            reader.readAsDataURL(file);
                          }
                        }}
                        style={{
                          width: '100%',
                          padding: '12px',
                          border: '2px dashed #667eea',
                          borderRadius: '8px',
                          fontSize: '14px',
                          background: '#f8f9ff'
                        }}
                      />
                      <p className="field-hint" style={{ marginTop: '8px', fontSize: '13px', color: '#666' }}>
                        üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–∞—à–µ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ (JPG, PNG, GIF)
                      </p>

                      {/* –ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
                      {uploadedImageUrl && (
                        <div style={{ marginTop: '15px' }}>
                          <p style={{ fontSize: '13px', color: '#666', marginBottom: '8px' }}>–ü—Ä–µ–≤—å—é:</p>
                          <img
                            src={uploadedImageUrl}
                            alt="–ü—Ä–µ–≤—å—é"
                            style={{
                              maxWidth: '300px',
                              maxHeight: '200px',
                              borderRadius: '8px',
                              border: '1px solid #ddd'
                            }}
                          />
                        </div>
                      )}

                      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
                      {uploadProgress > 0 && uploadProgress < 100 && (
                        <div style={{ marginTop: '15px' }}>
                          <p style={{ fontSize: '13px', color: '#666', marginBottom: '8px' }}>
                            –ó–∞–≥—Ä—É–∑–∫–∞: {Math.round(uploadProgress)}%
                          </p>
                          <div style={{
                            width: '100%',
                            height: '8px',
                            background: '#e0e0e0',
                            borderRadius: '4px',
                            overflow: 'hidden'
                          }}>
                            <div style={{
                              width: `${uploadProgress}%`,
                              height: '100%',
                              background: 'linear-gradient(90deg, #667eea, #764ba2)',
                              transition: 'width 0.3s'
                            }}></div>
                          </div>
                        </div>
                      )}
                    </>
                  )}
                </div>

                <div className="form-group">
                  <label htmlFor="news-link">–í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
                  <input
                    id="news-link"
                    type="url"
                    value={link}
                    onChange={e => setLink(e.target.value)}
                    placeholder="https://example.com"
                  />
                  <p className="field-hint">üìé –°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫, —Å—Ç–∞—Ç—å—é, Instagram –∏ —Ç.–¥.</p>
                </div>

                <button 
                  type="submit" 
                  className="btn btn-primary"
                  disabled={addingNews || (uploadProgress > 0 && uploadProgress < 100)}
                >
                  {uploadProgress > 0 && uploadProgress < 100
                    ? `–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${Math.round(uploadProgress)}%...`
                    : addingNews
                    ? "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏..."
                    : "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å"}
                </button>
              </form>
            </div>
          </section>

          {/* –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π */}
          <section className="admin-section">
            <h2 className="section-title">
              –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ ({news.length})
            </h2>
            
            {news.length === 0 ? (
              <div className="empty-state">
                <p>üì∞ –ü–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π</p>
              </div>
            ) : (
              <div className="news-list">
                {news.map(n => (
                  <div key={n.id} className="news-item">
                    <div className="news-item-header">
                      <h3>{n.title}</h3>
                      <span className="news-date">
                        {n.created_at ? new Date(n.created_at).toLocaleString('ru-RU') : "–¢–æ–ª—å–∫–æ —á—Ç–æ"}
                      </span>
                    </div>
                    
                    {n.image_url && (
                      <div className="news-item-image">
                        <img src={n.image_url} alt={n.title} />
                      </div>
                    )}
                    
                    <p className="news-text">{n.content}</p>
                    
                    {n.link && (
                      <div className="news-item-link">
                        <a href={n.link} target="_blank" rel="noopener noreferrer" className="external-link">
                          üîó –ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ ‚Üí
                        </a>
                      </div>
                    )}
                    
                    <div className="news-actions">
                      <button 
                        onClick={() => remove(n.id)} 
                        className="btn-delete"
                      >
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </section>
        </div>
      </div>
    </div>
  );
}

